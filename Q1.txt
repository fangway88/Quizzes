--------------------------------------------------------------------
Q1: Is there any compile error with the following code (if any)?
unsigned int Arr[16];
3[Arr] = 7;
Explain:  Yes, there is a compile error. It should be Arr[3] = 7.
--------------------------------------------------------------------
Q2: What is the difference between the following 3 statements?
const int * px;
int const * px;
int * const px;
Is there any compile error for the following cases?
case1:
int x = 13;
const int * px;
px = & x;
case 2:
int x = 13;
int const * px;
px = & x;
case 3:
int x = 13;
int * const px;
px = & x;
Explain:
const int * px; (value the pointer points to is constant)
int const * px; (value the pointer points to is constant … same meaning as line above)
int * const px; (pointer is constant)

--------------------------------------------------------------------
Q3: Write a function to set or clear ith bit of a 32-bit register.
Where ith (0-based) := {0, 1, 2, …, 31 }
void reg_set(volatile unsigned int * pReg, int ith)
{
  //number |= 1 << x;
}
void reg_clear(volatile unsigned int * pReg, int ith)
{
  //number &= ~(1 << x);
}
--------------------------------------------------------------------
Q4: Write a swap function in C.
void swap (int *px, int *py) { 
	int temp; temp = *px; *px = *py; *py = temp; 
}
--------------------------------------------------------------------
Q5: What is the output of the following code? (Given: sizeof(unsigned int) is 4) Page 34
unsigned int Arr[16];
unsigned int a0 = (unsigned int) &Arr[0];
unsigned int a3 = (unsigned int) &Arr[3];
printf(“%d\n”, a3 – a0);

This outputs 0.