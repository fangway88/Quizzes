Referred to edjuveong's work.


Q1: Implement the following inline functions:
inline int CircularBufferIsFull(CircularBuffer* que)
If the end (write) pointer refers to the slot preceding the one referred to by the start (read) pointer, the buffer is full.
inline int CircularBufferIsFull(CircularBuffer* que)
{
#if IS_BUFFER_SIZE_POWER_OF_TWO
return (((que->writePointer + 1) & que->mask) == que->readPointer);
#else
return (((que->writePointer + 1) % que->size) == que->readPointer);
#endif
}
inline int CircularBufferIsEmpty(CircularBuffer* que)
If both pointers refer to the same slot, the buffer is empty.
inline int CircularBufferIsEmpty(CircularBuffer* que)
{
return (que->readPointer == que->writePointer);
}
Q2: How to compute "Interrupt Latency"?
Latency is the sum of the time need to save and restore the context prior to the interrupt + time of interrupt service
routine + time to disable interrupt + time for OS bookkeeping
Q3: Serial pc(USBTX, USBRX); // tx, rx
What API (function) do you use to change the baud rate?
pc.baud ()
Q4: How many bit(s) does TDO have? Is TDO an input or output type? (Ref: JTAG Pins)
TDO is the JTAG serial data output.
There is 1 bit register between TDO (data output) and TDI (data input)
Q5:
I compiled below program listing and flashed into the MBED board.
It worked exactly as expected.
I also tried using the debug feature in uvision to understand the disassembled program.
What is the address of ledArr[0]? It is the adress of LED1 (Port 1 pin 18 of LPC1768), *LED1
What is the address of ch? *ch
* Enter a hex number [0-9a-fA-F]; Decode it in 4-bit binary format and display them on 4 on board leds.
#include "mbed.h"
Serial pc(USBTX, USBRX); // tx, rx
DigitalOut ledArr[4] = {DigitalOut(LED1), DigitalOut(LED2), DigitalOut(LED3), DigitalOut(LED4)};
void DisplayLed(int ch)
{
int i=0;
if (ch>='0' && ch<='9')
ch-='0';
else if (ch>='A' && ch<='F') {
ch-='A';
ch+=10;
} else if (ch>='a' && ch<='f') {
ch-='a';
ch+=10;
} else
ch=0;
for (i=0; i<4; i++) {
if(ch& (1<<i))
ledArr[i] = 1;
else
ledArr[i] = 0;
}
}
int main(void) {
int ch;
pc.baud(9600);
pc.printf("\r\nHello World!");
while(1) {
pc.printf("\r\nEnter:");
ch = pc.getc();
pc.putc(ch);
DisplayLed(ch);
}
} 